---
AWSTemplateFormatVersion: '2010-09-09'
Description: Aqua CSPM Security Hub Integration.
Parameters:
  AquaCSPMApiKey:
    Description: 'Aqua CSPM API key: Account Management > API Keys > Generate Key'
    Type: String
    NoEcho: True
  AquaCSPMSecretKey:
    Description: 'Aqua CSPM Secret'
    Type: String
    NoEcho: True
  Notifications:
    Description: "Select which findings to send to AWS Security Hub"
    Type: String
    AllowedValues: [Send All Scan Reports, Send New Risks Only]
    Default: Send All Scan Reports
Mappings:
  Constants:
    SecretManager:
      SecretName: "/aquacspm/secret_cspm_securityhub"

Resources:
  AquaCSPMSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Secret that contains Aqua CSPM API URL and token"
      Name: !FindInMap ["Constants", "SecretManager", "SecretName"]
      SecretString: !Sub '{"aqua_api_key":"${AquaCSPMApiKey}", "aqua_secret":"${AquaCSPMSecretKey}"}'
      KmsKeyId: !GetAtt AquaCSPMControlTowerKMSKey.Arn

  AquaCSPMSecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref AquaCSPMSecret
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaRole.Arn
            Action: 'secretsmanager:GetSecretValue'
            "Resource": !Ref AquaCSPMSecret

  AquaCSPMControlTowerKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "This is KMS Key Id used to encrypt/decrypt the Secret"
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Sub ${AWS::AccountId}
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt
              - kms:GenerateDataKey
              - kms:CreateGrant
              - kms:DescribeKey
            Resource: '*'
            Condition:
              StringEquals:
                kms:ViaService: !Sub secretsmanager.${AWS::Region}.amazonaws.com
                kms:CallerAccount: !Sub ${AWS::AccountId}

  AquaCSPMControlTowerKMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/AquaCSPM-Control-Tower-${AWS::StackName}"
      TargetKeyId:
        Ref: AquaCSPMControlTowerKMSKey

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref AquaCSPMSecret
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !GetAtt AquaCSPMControlTowerKMSKey.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ExternalIDInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt ExternalIDPrimer.Arn
      Secret: !FindInMap ["Constants", "SecretManager", "SecretName"]

  ExternalIDPrimer:
    DependsOn:
      - LambdaRole
    Type: AWS::Lambda::Function
    Properties:
      Description: Retrieves the External ID from Aqua CSPM
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          import urllib3.request
          import hashlib
          import time
          import hmac
          import base64
          import cfnresponse as cfr
          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          sess = boto3.session.Session()
          sm_client = sess.client('secretsmanager')

          def lambda_handler(event, ctxt):
            LOGGER.info('Lambda started :{}'.format(event))
            aqua_url = 'https://asia-2.api.cloudsploit.com'
            resData = {}
            rp = event['ResourceProperties']
            secret = rp['Secret']
            try:
              conf = get_conf(secret)
              aqua_api_key = conf['aqua_api_key']
              aqua_secret = conf['aqua_secret']
            except Exception as e:
                LOGGER.error('Error retrieving Keys: {e}')
                return cfr.send(event, ctxt, cfr.FAILED, resData, "ExtID")
            if event['LogicalResourceId'] == 'ExternalIDInvoke':
              LOGGER.info('ExtID creation started :{}'.format(event))
              try:
                extid = get_ext_id(aqua_url, aqua_api_key, aqua_secret)
                resData['ExternalId'] = extid
                return cfr.send(event, ctxt, cfr.SUCCESS, resData, "ExtID")
              except Exception as e:
                LOGGER.error(e)
                return cfr.send(event, ctxt, cfr.FAILED, resData, "ExtID")
            elif event['LogicalResourceId'] == 'IntegrationInvoke':
              LOGGER.info('Started integrating :{}'.format(event))
              extid = rp['ExtId']
              region = rp['Region']
              role_arn = rp['RoleArn']
              notifications = rp['ScanNotifications']
              acc = rp['AccId']
              intData = {}
              try:
                integrate(aqua_url, aqua_api_key, aqua_secret, acc, role_arn, extid, region, notifications)
                LOGGER.info(f'Integration successful {acc}')
                return cfr.send(event, ctxt, cfr.SUCCESS, intData, "Integrating")
              except Exception as e:
                LOGGER.error(e)
                return cfr.send(event, ctxt, cfr.FAILED, intData, "Integrating")

          def get_conf(secret):
            val = sm_client.get_secret_value(SecretId=secret)
            resp = val['SecretString']
            return json.loads(resp)

          def get_ext_id(url, api_key, aqua_secret):
            path = "/v2/generatedids"
            method = "POST"
            tstmp = str(int(time.time() * 1000))
            enc = tstmp + method + path
            enc_b = bytes(enc, 'utf-8')
            secret = bytes(aqua_secret, 'utf-8')
            sig = hmac.new(secret, enc_b, hashlib.sha256).hexdigest()
            hdr = {
              "Accept": "application/json",
              "X-API-Key": api_key,
              "X-Signature": sig,
              "X-Timestamp": tstmp,
              "content-type": "application/json"
            }
            http = urllib3.PoolManager()
            req = http.request('POST', url + path, headers=hdr)
            res = json.loads(req.data.decode('utf-8'))
            return res['data'][0]['generated_id']
        
          def integrate(url, api_key, aqua_secret, acc, role, ext_id, region, notificationType):
            path = "/v2/integrations"
            method = "POST"
            tstmp = str(int(time.time() * 1000))
            body = {
              "enabled": True,
              "name": "security_hub_" + acc,
              "settings": {
                "role_arn": role,
                "external_id": ext_id,
                "product_arn": "arn:aws:securityhub:" + region + "::product/aquasecurity/aquasecurity"
              },     
              "type": "securityhub"
            }
            if notificationType == 'Send New Risks Only':
              body['send_new_risks'] = True
            else:
              body['send_scan_results'] = True
            body_str = json.dumps(body, separators=(',', ':'))
            LOGGER.info(body_str)
            enc = tstmp + method + path + body_str
            enc_b = bytes(enc, 'utf-8')
            secret = bytes(aqua_secret, 'utf-8')
            sig = hmac.new(secret, enc_b, hashlib.sha256).hexdigest()
            hdr = {
              "Accept": "application/json",
              "X-API-Key": api_key,
              "X-Signature": sig,
              "X-Timestamp": tstmp,
              "content-type": "application/json"
            }
            http = urllib3.PoolManager()
            req = http.request('POST', url + path, headers=hdr, body=body_str)
            res = req.data
            LOGGER.info(f'Registration: {res}')
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt "LambdaRole.Arn"
      Runtime: python3.12

  AquaSecHubRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::057012691312:role/gtnpr-lambda-cloudsploit-api
            Action: sts:AssumeRole
            Condition:
              StringEquals: 
                sts:ExternalId: !GetAtt ExternalIDInvoke.ExternalId
              IpAddress:
                aws:SourceIp: 52.78.161.45/32
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::057012691312:role/gtnpr-lambda-cloudsploit-executor
            Action: sts:AssumeRole
            Condition:
              StringEquals: 
                sts:ExternalId: !GetAtt ExternalIDInvoke.ExternalId
              IpAddress:
                aws:SourceIp: 52.78.161.45/32
      Policies:
        - PolicyName: aqua-cspm-sechub-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'securityhub:BatchImportFindings'
                Resource: '*'
  IntegrationInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt ExternalIDPrimer.Arn
      Secret: !FindInMap ["Constants", "SecretManager", "SecretName"]
      RoleArn: !GetAtt AquaSecHubRole.Arn
      ExtId: !GetAtt ExternalIDInvoke.ExternalId
      AccId: !Ref "AWS::AccountId"
      Region: !Ref AWS::Region
      ScanNotifications: !Ref Notifications

Outputs:
  AquaCSPMeArn:
    Description: The role ARN of the cross-account user. Copy this into Aqua Cloud.
    Value: !GetAtt AquaSecHubRole.Arn
  StackVersion:
    Description: The Aqua CSPM stack version.
    Value: '2.0'